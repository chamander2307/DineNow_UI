import axios from "axios";
import { refreshToken } from "../services/authService";
import httpStatusMessages from "../constants/httpStatusMessages";

// ‚úÖ T·∫°o instance Axios
const instance = axios.create({
  baseURL: "http://localhost:8080/api",
  withCredentials: true, // Cho ph√©p g·ª≠i cookie (n·∫øu d√πng refreshToken d·∫°ng HttpOnly)
});

// ‚úÖ Interceptor tr∆∞·ªõc khi g·ª≠i request
instance.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");

  // G·∫Øn Authorization n·∫øu c√≥ token
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
    console.log("üîê G·ª≠i token:", config.headers["Authorization"]);
  }

  // ƒê·ª™NG ƒë·∫∑t Content-Type m·∫∑c ƒë·ªãnh ·ªü ƒë√¢y!
  // Axios s·∫Ω t·ª± ƒë·∫∑t:
  // - application/json cho object th∆∞·ªùng
  // - multipart/form-data khi d√πng FormData

  return config;
});

// ‚úÖ Interceptor x·ª≠ l√Ω response l·ªói
instance.interceptors.response.use(
  (res) => res,
  async (err) => {
    const originalRequest = err.config;

    // L·ªói kh√¥ng ph·∫£n h·ªìi
    if (!err.response) {
      console.error("‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server:", err);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
      return Promise.reject(err);
    }

    const status = err.response.status;
    const message = err.response?.data?.message || "Kh√¥ng r√µ nguy√™n nh√¢n";

    console.warn(`‚ö†Ô∏è Response Error ${status}: ${message}`);
    console.log("‚û°Ô∏è Request headers:", originalRequest.headers);

    // ‚úÖ Refresh token n·∫øu l·ªói 401/403 v√† ch∆∞a th·ª≠ l·∫°i
    if ((status === 401 || status === 403) && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        console.log("üîÑ G·ªçi refreshToken()");
        const data = await refreshToken();
        const newAccessToken = data.accessToken;

        localStorage.setItem("accessToken", newAccessToken);
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
        console.log("‚úÖ ƒê√£ refresh token:", newAccessToken);

        return instance(originalRequest); // G·ªçi l·∫°i request c≈©
      } catch (e) {
        console.error("‚ùå Refresh token th·∫•t b·∫°i:", e.response?.data || e.message);
        localStorage.removeItem("accessToken");

        if (!window.location.pathname.startsWith("/login")) {
          window.location.href = "/login";
        }

        return Promise.reject(e);
      }
    }

    // ‚ùå N·∫øu l√† l·ªói kh√°c, hi·ªÉn th·ªã c·∫£nh b√°o
    alert(httpStatusMessages[status] || `L·ªói ${status}: ${message}`);
    return Promise.reject(err);
  }
);

export default instance;
