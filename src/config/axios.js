// src/config/axios.js
import axios from "axios";
import { refreshToken } from "../services/authService";
import httpStatusMessages from "../constants/httpStatusMessages";

const instance = axios.create({
  baseURL: "http://localhost:8080/api",
  headers: {
    "Content-Type": "application/json",
  },
  withCredentials: true,
});

// ‚úÖ Th√™m log r√µ r√†ng khi g·ª≠i request
instance.interceptors.request.use((config) => {
  const token = localStorage.getItem("accessToken");
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
    console.log("üîê G·ª≠i token:", config.headers["Authorization"]);
  } else {
    console.warn("‚ö†Ô∏è Kh√¥ng c√≥ accessToken trong localStorage");
  }
  return config;
});

// ‚úÖ Log to√†n b·ªô ph·∫£n h·ªìi l·ªói n·∫øu c√≥
instance.interceptors.response.use(
  (res) => res,
  async (err) => {
    const originalRequest = err.config;

    if (!err.response) {
      console.error("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", err);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.");
      return Promise.reject(err);
    }

    const status = err.response.status;
    console.warn(`‚ö†Ô∏è Response Error: ${status}`);
    console.log("‚û°Ô∏è L√Ω do:", err.response?.data?.message);
    console.log("‚û°Ô∏è Request headers:", originalRequest.headers);

    if (status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const data = await refreshToken();
        const newAccessToken = data.accessToken;
        localStorage.setItem("accessToken", newAccessToken);
        originalRequest.headers["Authorization"] = `Bearer ${newAccessToken}`;
        console.log("‚úÖ ƒê√£ refresh accessToken:", newAccessToken);
        return instance(originalRequest);
      } catch (e) {
        console.error("‚ùå Refresh token th·∫•t b·∫°i:", e);
        localStorage.removeItem("accessToken");
        window.location.href = "/login";
      }
    }

    alert(httpStatusMessages[status] || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
    return Promise.reject(err);
  }
);

export default instance;
